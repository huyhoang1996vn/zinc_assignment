name: CI Workflow

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: docker_build
        run: |
          IMAGE_TAG=$(date +%s)
          docker build . --file Dockerfile --tag myapp:${IMAGE_TAG}
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        # Ensure your Dockerfile is in the root of your repository

      - name: Run database migrations
        env:
          # These environment variables will be available to the container running migrations
          # Assumes your main.py/settings.py can pick these up for Alembic
          SQL_URL: mysql+pymysql://root:${{ secrets.DB_ROOT_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "Waiting for MySQL to be healthy..."
          # Add a small delay or a more robust wait for MySQL if needed, though the health check helps
          sleep 15 
          docker run \
            --env SQL_URL \
            --env DB_NAME \
            myapp:${{ steps.docker_build.outputs.tag }} \
            python -c "from main import run_migrations; run_migrations()"
        # This command assumes:
        # 1. Your Docker image 'myapp' contains Python and your application code (main.py).
        # 2. 'main.py' has a function 'run_migrations()' that Alembic can use.
        # 3. Your Alembic setup and settings.py correctly use SQL_URL and DB_NAME.

      - name: Run unit tests
        env:
          SQL_URL: mysql+pymysql://root:${{ secrets.DB_ROOT_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          docker run \
            --env SQL_URL \
            --env DB_NAME \
            myapp:${{ steps.docker_build.outputs.tag }} \
            pytest
        # This command assumes:
        # 1. 'pytest' is installed in your Docker image (via requirements.txt).
        # 2. Your tests are discoverable by pytest (e.g., in a 'tests' folder or with 'test_' prefix).
        # 3. Your tests correctly use the provided SQL_URL and DB_NAME for database interactions. 